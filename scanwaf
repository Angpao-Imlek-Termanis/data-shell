<?php
// scan_backdoor_audit.php
// Wrapper audit untuk "backdoor scanner" original.
// - TIDAK mengeksekusi file apapun
// - Mencari pola berbahaya dasar (exec, eval, shell_exec, dll)
// - Mendeteksi base64 / gzinflate / obf berlapis dan mencoba decode non-destruktif
// - Menyimpan log temuan ke audit-findings.txt
// Gunakan hanya di lingkungan yang Anda miliki izin.

ini_set('display_errors', 0);
error_reporting(0);
set_time_limit(0);

function logf($msg){
    $line = "[".date('Y-m-d H:i:s')."] ".$msg."\n";
    @file_put_contents(__DIR__.DIRECTORY_SEPARATOR.'audit-findings.txt', $line, FILE_APPEND | LOCK_EX);
}

// Safe read file contents with size limit
function safe_get_contents($path, $max_bytes = 5*1024*1024){
    if(!is_file($path) || !is_readable($path)) return false;
    $size = filesize($path);
    if($size === 0) return '';
    if($size > $max_bytes) {
        // read only first portion to inspect
        $fh = fopen($path,'rb');
        if(!$fh) return false;
        $data = fread($fh, $max_bytes);
        fclose($fh);
        return $data;
    }
    return @file_get_contents($path);
}

// detect suspicious functions/patterns (case-insensitive)
function suspicious_patterns_found($contents){
    $patterns = [
        'exec\\s*\\(',
        'shell_exec\\s*\\(',
        'system\\s*\\(',
        'passthru\\s*\\(',
        'popen\\s*\\(',
        'proc_open\\s*\\(',
        'eval\\s*\\(',
        'assert\\s*\\(',
        'base64_decode\\s*\\(',
        'gzinflate\\s*\\(',
        'gzuncompress\\s*\\(',
        'str_rot13\\s*\\(',
        'create_function\\s*\\(',
        'preg_replace\\s*\\(.*?/e',
        'file_put_contents\\s*\\(',
        'file_get_contents\\s*\\(',
        'move_uploaded_file\\s*\\(',
    ];
    $joined = implode('|', $patterns);
    return preg_match("/{$joined}/i", $contents);
}

// find obvious base64-looking blobs
function find_base64_blobs($contents){
    $out = [];
    // match strings >= 40 chars base64-like (A-Za-z0-9+/=)
    if(preg_match_all('/([A-Za-z0-9\/\+\=]{40,})/s', $contents, $m)){
        foreach($m[1] as $cand){
            // ensure it decodes to printable content
            $decoded = @base64_decode($cand, true);
            if($decoded !== false && strlen($decoded) > 0){
                $out[] = $cand;
            }
        }
    }
    return $out;
}

// try to recursively decode common layers (base64 + gzinflate) up to depth
function try_decode_layers($blob, $max_depth = 4){
    $result = [];
    $current = $blob;
    for($i=0;$i<$max_depth;$i++){
        $decoded = @base64_decode($current, true);
        if($decoded !== false && strlen($decoded)>0){
            $result[] = ['type'=>'base64','data'=>$decoded];
            $current = $decoded;
            continue;
        }
        // try gzinflate on current (if binary-looking)
        $infl = @@gzinflate($current);
        // suppress warnings; gzinflate returns false on failure
        if($infl !== false && strlen($infl)>0){
            $result[] = ['type'=>'gzinflate','data'=>$infl];
            $current = $infl;
            continue;
        }
        // if cannot decode further, break
        break;
    }
    return $result;
}

// single-file audit logic (non-destructive)
function audit_file($path){
    $short = strlen($path) > 200 ? substr($path,0,200).'...' : $path;
    $contents = safe_get_contents($path);
    if($contents === false) return;
    $lower = strtolower($contents);

    $found = false;
    $reason = [];

    if(suspicious_patterns_found($contents)){
        $found = true;
        $reason[] = "pattern_func";
    }

    $base64_candidates = find_base64_blobs($contents);
    if(count($base64_candidates) > 0){
        $found = true;
        $reason[] = "base64_blob(".count($base64_candidates).")";
    }

    // Quick check for very short obfuscation like "eval(base64_decode(...))"
    if(preg_match('/eval\\s*\\(\\s*base64_decode\\s*\\(/i', $contents)){
        $found = true;
        $reason[] = "eval(base64_decode(...))";
    }

    if($found){
        $summary = "SUSPICIOUS => $short ; reasons: ".implode(',', $reason);
        echo htmlspecialchars($summary, ENT_QUOTES | ENT_SUBSTITUTE)."<br/>\n";
        logf($summary);
        // show safe preview (escaped) of head
        $preview = substr($contents,0, 8000);
        echo "<pre style=\"background:#000;color:#0f0;padding:8px;overflow:auto;max-height:240px\">".htmlspecialchars($preview)."</pre><br/>\n";

        // If base64 candidates exist, list short decodes (non-executing)
        foreach($base64_candidates as $idx=>$b){
            echo "<details style='color:#0f0'><summary>Base64 blob #".($idx+1)." (length ".strlen($b).") â€” decode preview</summary>";
            $decoded = @base64_decode($b, true);
            if($decoded !== false){
                $layers = try_decode_layers($b, 5);
                foreach($layers as $li => $layer){
                    echo "<div style='margin:6px;padding:6px;background:#111;color:#afa'><strong>Layer ".($li+1)." ({$layer['type']}) preview:</strong><pre style='white-space:pre-wrap;'>".htmlspecialchars(substr($layer['data'],0,2000))."</pre></div>";
                }
                if(empty($layers)){
                    echo "<div style='margin:6px;padding:6px;background:#111;color:#afa'><pre>".htmlspecialchars(substr($decoded,0,800))."</pre></div>";
                }
            } else {
                echo "<div style='color:#f88'>Gagal decode base64 (strict)</div>";
            }
            echo "</details>";
        }
    }
}

// recursive scan (read-only)
function scan_dir($dir){
    if(!is_dir($dir) || !is_readable($dir)) return;
    $list = @scandir($dir);
    if(!is_array($list)) return;
    foreach($list as $f){
        if($f === '.' || $f === '..') continue;
        $path = $dir . DIRECTORY_SEPARATOR . $f;
        // skip big vendor directories optionally
        if(is_dir($path)){
            // skip common large directories optionally
            $basename = strtolower($f);
            if(in_array($basename, ['node_modules','vendor','.git','cache','tmp'])) continue;
            scan_dir($path);
        } else {
            // only inspect php files to keep speed
            if(substr(strtolower($f), -4) === '.php'){
                audit_file($path);
            }
        }
    }
}

// UI / entry
$dir = getcwd();
if(!empty($_GET['dir'])){
    $d = $_GET['dir'];
    // basic sanitize: do not allow obvious path traversal outside server root? (user responsible)
    $dir = $d;
}
echo "<div style='font-family:monospace;color:#0f0;background:#000;padding:10px'>";
echo "Audit scan starting in: ".htmlspecialchars($dir)."<br><br>";
scan_dir($dir);
echo "<br>Scan finished. Findings appended to <strong>audit-findings.txt</strong> in the script folder.<br>";
echo "</div>";
?>
